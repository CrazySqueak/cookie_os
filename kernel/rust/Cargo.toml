[package]
name = "kernel_rs"
version = "0.1.0"
edition = "2021"

[dependencies]
buddy_system_allocator = "0.10.0"
volatile = "0.2.6"
uart_16550 = "0.3.0"
cfg-if = "1.0.0"
lock_api = "0.4.12"
spin = { version = "0.9.8", features = ["lock_api"] }
lazy_static = { version = "1.0", features = ["spin_no_std"] }
bitflags = "2.6.0"
either = { version = "1.13.0", default-features = false }

[target.'cfg(target_arch = "x86_64")'.dependencies]
x86_64 = "0.15.1"
pic8259 = "0.10.1"
pc-keyboard = "0.7.0"
raw-cpuid = { git = "https://github.com/CrazySqueak/rust-cpuid.git", branch = "os_test_2" }
acpi = "5.0.0"

[features]
# Enables 1GiB Huge Pages on x86_64 systems. This is a relatively new feature and is not supported by all CPUs.
# Arch: x86_64
1G_huge_pages = []
# Enables the NXE (No-Execute) Page Entry bit (bit 63) on x86_64 systems.
# Arch: x86_64
per_page_NXE_bit = []
# Enables the G (Global) bit in page mappings, on x86_64 systems.
# Arch: x86_64
page_global_bit = []
# Enables the TCE (Translation Cache Extensions) system in the EFER register, for AMD64 (x86_64) systems. (See https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/programmer-references/24593.pdf ยง3.1.7)
# TCE makes some things faster by not clearing some TLB caches, but requires the OS to be aware of it and take it into account.
# I have no clue how invlpg actually works so my code is already compatible (as I made the most conservative assumption)
# Note: This is not present in the latest Intel manual https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html ยง4.2.1 Pg2-64 under IA32_EFER
# If this feature is enabled but unsupported, it will be ignored.
# Arch: x86_64 (AMD)
enable_amd64_TCE = []
# Enable the use of AMD's INVLPGB instruction if supported
# Arch: x86_64 (AMD)
enable_amd64_invlpgb = []

# If enabled, a kernel panic caused by a task will terminate that task instead of shutting down the entire system.
# Kernel panics should only happen in this way due to bugs or similar conditions, and the resulting system may be unstable.
# However, this setting may come in handy on release builds, for resilience
# Make sure to disable it on debug builds though unless you want your life made 100x harder
recover_from_task_related_kernel_panic = []

# DEBUGGING FEATURES (dbg_ prefix)
# Stores the location where no_interruption guards are taken
dbg_track_nointerrupt_source = []

[lib]
crate-type = ["staticlib"]

[profile.dev]
panic = "abort"

[profile.dev.package."*"]
# Optimise dependencies even in dev mode
opt-level = 3

[profile.release]
panic = "abort"
